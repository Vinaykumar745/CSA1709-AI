import numpy as npMore actions

# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Training dataset: XOR problem
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

# Labels for XOR
y = np.array([[0], [1], [1], [0]])

# Seed for reproducibility
np.random.seed(42)

# Initialize weights and biases
input_layer_neurons = X.shape[1]     # 2 input features
hidden_layer_neurons = 4             # You can tune this
output_neurons = 1                   # Binary output

# Random weights and biases
wh = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))   # weights for input -> hidden
bh = np.random.uniform(size=(1, hidden_layer_neurons))                     # biases for hidden
wo = np.random.uniform(size=(hidden_layer_neurons, output_neurons))       # weights for hidden -> output
bo = np.random.uniform(size=(1, output_neurons))                           # biases for output

# Training algorithm
epochs = 10000
learning_rate = 0.1

for epoch in range(epochs):
    # Forward Propagation
    hidden_input = np.dot(X, wh) + bh
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, wo) + bo
    output = sigmoid(final_input)

    # Backpropagation
    error = y - output
    d_output = error * sigmoid_derivative(output)

    error_hidden = d_output.dot(wo.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)

    # Update weights and biases
    wo += hidden_output.T.dot(d_output) * learning_rate
    bo += np.sum(d_output, axis=0, keepdims=True) * learning_rate
    wh += X.T.dot(d_hidden) * learning_rate
    bh += np.sum(d_hidden, axis=0, keepdims=True) * learning_rate

# Final output after training
print("Final output after training:")
print(output.round(3))
