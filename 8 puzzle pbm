@@ -0,0 +1,84 @@
import heapq
# Goal state
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]
# Directions: up, down, left, right
DIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]
class PuzzleState:
    def _init_(self, board, g=0, parent=None):
        self.board = board
        self.g = g  # cost from start to current state
        self.h = self.manhattan_distance()
        self.f = self.g + self.h
        self.parent = parent
    def _lt_(self, other):  # needed for heapq
        return self.f < other.f
    def manhattan_distance(self):
        """Calculate the Manhattan distance of the board."""
        distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    goal_x = (value - 1) // 3
                    goal_y = (value - 1) % 3
                    distance += abs(i - goal_x) + abs(j - goal_y)
        return distance
    def is_goal(self):
        return self.board == GOAL_STATE
    def get_neighbors(self):
        neighbors = []
        x, y = next((i, j)
                    for i in range(3)
                    for j in range(3)
                    if self.board[i][j] == 0)
        for dx, dy in DIRS:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
                neighbors.append(PuzzleState(new_board, self.g + 1, self))
        return neighbors
    def _hash_(self):
        return hash(str(self.board))
    def _eq_(self, other):
        return self.board == other.board
    def _str_(self):
        return "\n".join(" ".join(str(c) for c in row) for row in self.board)
def a_star(start_board):
    start = PuzzleState(start_board)
    if start.is_goal():
        return [start]
    frontier = []
    heapq.heappush(frontier, start)
    explored = set()
    while frontier:
        current = heapq.heappop(frontier)
        if current.is_goal():
            path = []
            while current:
                path.append(current)
                current = current.parent
            return path[::-1]
        explored.add(current)

        for neighbor in current.get_neighbors():
            if neighbor not in explored and neighbor not in frontier:
                heapq.heappush(frontier, neighbor)
    return None
def print_path(path):
    for i, state in enumerate(path):
        print(f"Step {i}:")
        print(state)
        print()
if _name_ == "_main_":
    start_board = [[2, 8, 3],
                   [1, 6, 4],
                   [7, 0, 5]]
    path = a_star(start_board)
    if path:
        print(f"Solution found in {len(path) - 1} moves.")
        print_path(path)
    else:
        print("No solution found.")
