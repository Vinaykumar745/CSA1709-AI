import math

# Function to perform alpha-beta pruning
def alpha_beta_pruning(depth, node_index, is_maximizing_player, values, alpha, beta):
    # If depth is 0, return the leaf node value
    if depth == 0:
        return values[node_index]

    if is_maximizing_player:
        max_eval = -math.inf
        for i in range(2):
            eval = alpha_beta_pruning(depth - 1, node_index * 2 + i, False, values, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)

            # Prune the remaining branches
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(2):
            eval = alpha_beta_pruning(depth - 1, node_index * 2 + i, True, values, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)

            # Prune the remaining branches
            if beta <= alpha:
                break
        return min_eval

# Example usage
if __name__ == "__main__":
    # A sample game tree of depth 3 with 8 leaf nodes (2^3)
    values = [3, 5, 6, 9, 1, 2, 0, -1]  # Leaf node values
    depth = 3

    result = alpha_beta_pruning(depth, 0, True, values, -math.inf, math.inf)
    print("The optimal value is:", result)
